{
  "name": "css预编译",
  "tagline": "css预编译学习文档",
  "body": "# CSS预编译\r\n---\r\n## 为什么要学习css预编译\r\nCSS入门简单，深入就比较难，虽然样式简单，但难以维护。需要考虑大量的样式，覆盖、权重和很多!important。\r\n## 什么是 css预处理器\r\n\r\nCSS预处理器定义了一种新的语言，其基本思想是，用一种专门的编程语言，为CSS增加了一些编程的特性，将CSS作为目标生成文件，然后开发者就只要使用这种语言进行编码工作。通俗的说，CSS预处理器用一种专门的编程语言，进行Web页面样式设计，然后再编译成正常的CSS文件，以供项目使用。CSS预处理器为CSS增加一些编程的特性，无需考虑浏览器的兼容性问题，例如你可以在CSS中使用变量、简单的逻辑程序、函数等等在编程语言中的一些基本特性，可以让你的CSS更加简洁、适应性更强、可读性更佳，更易于代码的维护等诸多好处。\r\n\r\n## css预处理器语言\r\n现今市面上主要有 `Sass`、`Less`、`Stylus` 这三类预处理器语言。\r\n\r\n###1、背景介绍\r\n- Sass背景介绍\r\n>Sass是对CSS的语法的一种扩充，诞生于2007年，最早也是最成熟的一款CSS预处理器语言，它可以使用变量、常量、嵌套、混入、函数等功能，可以更有效有弹性的写出CSS。Sass最后还是会编译出合法的CSS让浏览器使用，也就是说它本身的语法并不太容易让浏览器识别，因为它不是标准的CSS格式，在它的语法内部可以使用动态变量等，所以它更像一种极简单的动态语言。\r\n注：Sass官网地址：[http://sass-lang.com][1]\r\n\r\n- Less背景介绍\r\n>2009年开源的一个项目，受Sass的影响较大，但又使用CSS的语法，让大部分开发者和设计师更容易上手。\r\n注：LESS的官网：[http://lesscss.org][2]\r\n\r\n- Stylus背景介绍\r\n> Stylus，2010年产生，来自于Node.js社区，主要用来给Node项目进行CSS预处理支持，不过Stylus的人气相对于Sass和Less则逊色很多。\r\n注：Stylus官网：[http://learnboost.github.com/stylus][3]\r\n\r\n\r\n###2、Sass和Less对比\r\n\r\n> * 实现方式\r\nLess是基于JavaScript引擎，需要在客户端处理的。<br>\r\nSass是基于Ruby环境，是在服务器端处理的。<br>\r\n相比之下less环境相对Sass简单\r\n注：很多开发者不会选择LESS因为JavaScript引擎需要额外的时间来处理代码然后输出修改过的CSS到浏览器。关于这个有很多种方式，我选择的是只在开发环节使用LESS。\r\n> * 使用率(热度)\r\n国内前端团队使用LESS的同学会略多于Sass\r\n国外则普遍使用Sass,热度高\r\n> * 功能\r\nSass较Less略强大一些\r\n> * 已有成熟框架对比\r\nSass在市面上有一些成熟的框架，比如说`Compass`，而且有很多框架也在使用Sass，比如说Foundation，bootstrap也开始使用sass\r\n\r\n\r\n##Sass入门\r\n\r\n----------\r\n\r\n\r\n###Sass环境安装\r\n 编写scss代码，通过sass的工作引擎编译成css代码，最后的部署阶段，其实部署的是生成的css代码，从这个流程可以看出sass并不是万金流，使用命令行也好，使用服务端集成框架也好，使用图形用户界面工具也好，最关键的环节是输入css，从这里也可表现出sass就是帮助我们更快的写出具有高可维护性的css代码<br>\r\n\r\n - GUI工具 Koala<br>\r\nkoala 是一款桌面程序，支持 less 、 sass 、 coffeescript 即时编译，帮助 web 开发者更高效地使用 less 、 sass 、 coffeescript 开发。\r\n下载： [http://koala-app.com/index-zh.html][4]\r\n - 命令操作<br>\r\n1.安装ruby环境 官网地址：[http://www.ruby-lang.org/en/][5]\r\n下载RubyInstaller后记得勾选 add ruby executables to your PATH 选项\r\n2.更改ruby包的sources\r\n   -  **gem sources --remove https://rubygems.org/**\r\n   -  **gem sources --add https://ruby.taobao.org/** （如果你系统不支持https，请将淘宝源更换成：gem sources -a http://gems.ruby-china.org）\r\n   - **gem install sass**\r\n   - **gem update**(更新ruby程序)\r\n   - **gem install sass --vertion=3.3**\r\n   - **gem list** (列出本地安装的所有ruby程序包)\r\n   - **gem uninstall sass --vertion=3.3.0**(删除相应的程序包)\r\n   - **sass main.scss main.css**(将.scss文件编译成.css文件)\r\n   - **sass --style compressed test.sass test.css**（压缩文件）\r\n - 自动化构建工具 gulp\r\n 注：[Gulp官网][6]\r\n - 服务端集成工具之 webStorm\r\n###Sass语法入门\r\n####sass和scss的区别：\r\nsass有两种语法，一种是`sass`（缩排写法）,这种语法的文件需要以.sass扩展名。另一种则是在sass的基础上，对css3扩从的`scss`，这种语法的文件需要以.scss扩展名。<br>\r\n第一种sass语法，是不使用花国号，对空格 换行 敏感，通过缩排的方式来表达选择符，语法特点是更加简洁，像习惯编写ruby phthon的人可以可能会比较喜欢。<br>\r\n第二种scss语法，延续之前的css语法，大多数地道的前端团队会选择scss\r\n```\r\n/*sass语法*/\r\nh3\r\n  color: #eee\r\n  font-size:12px\r\n  \r\n/*scss语法*/\r\nh3{\r\n  color: #eee;\r\n  font-size:12px;\r\n}\r\n```\r\n使用命令行转换格式： sass-convert main.scss main.sass\r\n####嵌套(Nesting)\r\n```\r\n/***选择器嵌套***/\r\n .recom-r{\r\n      ul{\r\n        li{\r\n        color:red;\r\n          &:nth-child(1) a,&:nth-child(2) a{\r\n            border-right:none;\r\n          }\r\n           a{\r\n            border: 1px 0  0 #ddd;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    //编译为\r\n    .recom-r ul li{\r\n     color:red;}\r\n    .recom-r ul li a {\r\n     border-bottom: 1px solid #ddd; }\r\n   .recom-r ul li:nth-child(1) a, .products-recom .modcon .recom-r ul li:nth-child(2) a {\r\n     border-right: none; }\r\n     \r\n     \r\n     /***属性嵌套嵌套***/\r\n     .abc{\r\n      border:{\r\n        style:solid;\r\n        left:{\r\n         width:4px;\r\n         color:red;\r\n        }\r\n        right{\r\n          width:1px;\r\n          color:blue;\r\n        }\r\n      }\r\n     }\r\n     //编译为\r\n     .abc{\r\n       border-style: solid;\r\n       border-left-width: 4px;\r\n       border-left-color: red;\r\n       border-right-width: 1px;\r\n       border-right-color: blue; \r\n     }\r\n```\r\n\r\n####导入 @import\r\n```\r\n@import \"reset\" //这里是简写 _reset.scss,以下划线开头的scss文件默认不自动编译出来，是专门用来导入的文件\r\n```\r\n\r\n####变量 $\r\n```\r\n/***默认变量***/\r\n$default-color: #2898fd;\r\nbody{\r\n  color:$default-color;\r\n}\r\n//解析如下\r\nbody{\r\n  color:#2898fd;\r\n}\r\n/***多值变量***/\r\n$a-color:red blue yellow;\r\na{\r\n  &:hover{color:$a-color,1}\r\n  &:active{color:$a-color,2}\r\n}\r\n//解析如下\r\na:hover{color:red}\r\na:active{color:blue}\r\n\r\n注：compass中采用中划线的方式命名\r\n```\r\n\r\n####注释\r\n        /* */  标准的css注释方式 \r\n        // 这种单行注释是不会解析到css文件中 \r\n        \r\n####混合(mixin)        \r\n```\r\n@mixin transition($transition){\r\n  -webkit-transition: $transition;\r\n  -moz-transition: $transition;\r\n  -o-transition: $transition;\r\n  transition: $transition;\r\n}\r\na{\r\n @include transition(all 0.2s linear);\r\n}\r\n//编译为\r\na{\r\n  -webkit-transition: all 0.2s linear;\r\n  -moz-transition: all 0.2s linear;\r\n  -o-transition: all 0.2s linear;\r\n  transition: all 0.2s linear;\r\n}\r\n```\r\n####运算\r\n```\r\nbody{\r\n  width:100%;\r\n}\r\narticle{\r\n  width:600px / 1200px *100%;\r\n}\r\n//编译为\r\nbody{\r\n  width:100%;\r\n}\r\narticle{\r\n  width:50%；\r\n}\r\n```\r\n####扩展/继承@extent\r\n```\r\n.a{\r\n  color:red;\r\n  font-size:12px;\r\n  padding:10px;\r\n}\r\n.b{\r\n   @extent .abc;\r\n   margin:10px;\r\n}\r\n.c{\r\n   @extent .abc;\r\n  margin:20px;\r\n}\r\n//编译为\r\n.a, .b , .c{\r\n  color:red;\r\n  font-size:12px;\r\n  padding:10px;\r\n}\r\n.b{\r\n   margin:10px;\r\n}\r\n.c{\r\n   margin:20px;\r\n}\r\n```\r\n\r\n####控制指令\r\n```\r\n/******@if******/\r\n$type: monster;\r\np {\r\n  @if $type == ocean {\r\n    color: blue;\r\n  } @else if $type == matador {\r\n    color: red;\r\n  } @else if $type == monster {\r\n    color: green;\r\n  } @else {\r\n    color: black;\r\n  }\r\n}\r\n//编译为\r\np {\r\n    color: green; \r\n  }\r\n  \r\n/******@while******/\r\n$i: 6;\r\n@while $i > 0 {\r\n  .item-#{$i} { width: 2em * $i; }\r\n  $i: $i - 2;\r\n}\r\n//编译为\r\n.item-6 {\r\n    width: 12em;\r\n}\r\n.item-4 {\r\n    width: 8em;\r\n}\r\n.item-2 {\r\n    width: 4em; \r\n}\r\n\r\n```\r\n####选择器\r\n> 子组合选择器 ` > ` :选择一个元素的直接子元素\r\n>同层相邻组合选择器 `+` :选择紧跟在后面的同级元素\r\n>同层全体组合选择器 `~` :选择所有跟在后的同层元素\r\n####颜色函数\r\n```\r\n$ sass -i\r\n>> rgb(200,40,88) //根据r:200,g:40,b:88计算出一个十六进制颜色值\r\n得出：#c82858\r\n>> rgba(#c82858,.65) //根据#c82858的65%透明度计算出一个rgba颜色值\r\n得出：rgba(200, 40, 88, 0.65)\r\n>> red(#c82858) //从#c82858颜色值中得到红色值200\r\n得出：200\r\n>> green(#c82858) //从#c82858颜色值中得到绿色值40\r\n得出：40\r\n>> blue(#c82858) //从#c82858颜色值中得到蓝色值88\r\n得出：88\r\n>> mix(#c82858,rgba(200,40,80,.65),.3) //把#c82858和rgba(200,40,88,.65)两颜色按比例混合得到一个新颜色\r\nrgba(200, 40, 80, 0.65105)\r\n>> lighten(red,10%)//将red颜色安装亮度值增加10%\r\n得出：#ff3333\r\n>> darken(red,10%)//将red颜色安装亮度值变暗10%\r\n得出：#cc0000\r\n>>complement(red)//获取red颜色的补充色\r\n得出#00ffff\r\n...\r\n```\r\n**注：详细参见[Sass官网][7]**\r\n\r\n##Compass框架\r\n###介绍\r\n>Compass是一个强大的Sass框架，能够利用它写出可维护性更高的样式表。\r\nCompass由三个主要部分组成：混合器和实用工具的类库，能够集成到应用开发环境中的开发系统，以及一个用于构建框架和扩展的平台。<br>\r\nCompass自身包含了很多由Sass混合器和函数构成的模块，所有的这些模块在Compass的官网上都有详细的说明和示例。<br>\r\n这些库会帮助你解决跨浏览器兼容问题，以及提供给你很多已经被证明过的优秀模式，比如说重置、网格布局、列表样式、表格辅助器等。\r\n注：[Comapass官网][8]\r\n###安装\r\n\r\n使用命令行：  gem install compass（这样就创建好了）\r\n###项目初始化\r\n先创建一个文件夹 mkdir compasstext,\r\n点击进入这个文件 cd compasstext,\r\n创建compass项目的文件 compass create mallApp,\r\n点击进入这个文件 cd mallApp,\r\n这个时候我们想要清楚 可以输入 compass clean\r\n如果想重新开始编译 可以输入 compass compile\r\n开启监听 可以输入：compass watch\r\n> 常见的命令操作 输入`compass -h`进行查看\r\n\r\n###编译\r\n> * Compass的编译命令是：compass compile <br> 注：该命令是在项目根目录下运行，会将sass子目录中的scss文件编译成css文件，保存再stylesheets子目录中<br>\r\n> * Compass的压缩命令是：compass commpile -- output-style compressed<br> 注：compass只编译发生变动的文件，如果需要重新编译未变动的文件，需要使用 compass compile --force<br>\r\n> * Compass自动编译：compass watch<br>\r\n运行该命令后，只要scss文件发生变化，就会自动编译成css文件，并且在cmd上导出文件变化的具体信息\r\n\r\n###Compass模块\r\ncompass采用模块的结构，不同的模块提供不同的功能，总共内置了五个模块：<br>\r\n\r\n - [ ] resect \r\n - [ ] css3\r\n - [ ] layout\r\n - [ ] typography\r\n - [ ] utulities\r\n注：除了内置的5个模块外，还可以自行加载网上的第三方模块或者手动编写\r\n\r\n - **resect模块**\r\n<br>这个模块的内容是一些初始化样式，也就是说我们需要重置的浏览器默认样式的样式代码\r\n写法是： @import \"compass/reset\"；\r\n - **css3模块**\r\n<br>目前这个模块提供19种css3命令<br>\r\n首先需要导入css3模块，写法是:  @import \"compass/css3\"<br>\r\n比如**圆角**，写法如下：\r\n```\r\n.rounded {\r\n   @include border-radius(5px);\r\n}\r\n//编译后\r\n.rounded {\r\n    -moz-border-radius: 5px;\r\n    -webkit-border-radius: 5px;\r\n    -o-border-radius: 5px;\r\n    -ms-border-radius: 5px;\r\n    -khtml-border-radius: 5px;\r\n    border-radius: 5px;\r\n}\r\n```\r\n比如**行内区块**，写法如下：\r\n```\r\n#inline-block {\r\n     @include inline-block;\r\n}\r\n//编译后\r\n#inline-block {\r\n    display: -moz-inline-stack;\r\n    display: inline-block;\r\n    vertical-align: middle;\r\n    *vertical-align: auto;\r\n    zoom: 1;\r\n}\r\n```\r\n比如**透明**，写法如下：\r\n```\r\n#opacity {\r\n    @include opacity(0.5); \r\n}\r\n//编译后\r\n #opacity {\r\n    filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=0.5);\r\n    opacity: 0.5;\r\n}\r\n```\r\n - **layout模块**\r\n  该模块顾名思义就是提供布局功能(使用率较低)\r\n首先需要导入layout模块，写法是:  @import \"compass/layout\"<br>\r\n```\r\n//指定页面的footer部分总是出现在浏览器最底端：\r\n#footer {\r\n    @include sticky-footer(54px);\r\n}\r\n//指定子元素占满父元素的空间：\r\n#stretch-full {\r\n    @include stretch; \r\n}\r\n//编译为\r\n#stretch-full {\r\n    position:absolute;\r\n    top:0;\r\n    right:0;\r\n    bottom:0;\r\n    left:0;\r\n}\r\n```\r\n - **typography模块**\r\n该模块提供版式功能。首先需要导入typography模块，写法是:  @import \"compass/typography\"<br>\r\n\r\n比如指定链接颜色的mixin为：\r\n```\r\n link-colors($normal, $hover, $active, $visited, $focus);\r\n```\r\n使用时写成：\r\n```\r\na {\r\n    @include link-colors(#00c, #0cc, #c0c, #ccc, #cc0);\r\n}\r\n```\r\n - **utilities模块**\r\n 该模块提供某些不属于其他模块的功能。\r\n首先需要导入utilities模块，写法是:  @import \"compass/utilities\"<br>\r\n比如**清除浮动**,写法如下:\r\n```\r\n.clearfix {\r\n    @include clearfix;\r\n}\r\n//编译为\r\n.clearfix {\r\n  overflow: hidden;\r\n  *zoom: 1;\r\n}\r\n\r\n```\r\n比如**表格**,写法如下:\r\n```\r\ntable {\r\n    @include table-scaffolding;\r\n}\r\n//编译后\r\ntable th {\r\n    text-align: center;\r\n    font-weight: bold;\r\n}\r\ntable td,\r\ntable th {\r\n     padding: 2px;\r\n}\r\ntable td.numeric,\r\ntable th.numeric {\r\n    text-align: right;\r\n}\r\n\r\n```\r\n比如**制作雪碧图（Sprite）**\r\n个人认为这个是compass中的重中之中，实在太强大。\r\n你需要将合并的图片放在一个文件夹下面，compass会自动合并成一张图片，并且设定好坐标\r\n写法如下：\r\n```\r\n@import \"icons/*.png\"; @include all-icons-sprites; //all-後面接著的「icons」代表文件夹的名称\r\n//编译后\r\n.icons-sprite, .icons-facebook, .icons-twitter, .icons-yahoo { \r\n    background: url('icons-s0859518ac7.png') no-repeat;\r\n} \r\n.icons-facebook { background-position: 0 0; }\r\n.icons-twitter { background-position: 0 -32px; } \r\n.icons-yahoo { background-position: 0 -64px; } \r\n```\r\n注：功能太多，详细查看[Comapass官网][9]\r\n##Sass调试\r\n###1、Koala调试方式\r\n> 1.Koala上点击相应的文件，然后就会出现右边的编译选项，即可选择是否开启source map，debug info <br>\r\n> 2.打开Chrome浏览器，F12打开调试面板，点击调试面板右上角的齿轮图标打开设置，在general选项中勾选Enable CSS source map 和 Auto-reload generated CSS<br>\r\n> 3.开启--sourcemap编译，f12打开调试面板，就可以看到原先右边的css文件变成了我们现在的scss文件<br>\r\n> 4.点击scss文件，会跳到source里面的scss源文件，现在可以在里面进行修改，修改完成后可以右键选择save或save as命令，然后替换我们本地的scss源文件，刷新chrome就可以看到变化（注意，解析样式需要一定时间）。以后只要ctrl+s保存修改就可以在浏览器中看到修改效果了。\r\n\r\n###2、命令行调试方式\r\n\r\n\r\n  [1]: http://sass-lang.com\r\n  [2]: http://lesscss.org\r\n  [3]: http://learnboost.github.com/stylus\r\n  [4]: http://koala-app.com/index-zh.html\r\n  [5]: http://www.ruby-lang.org/en/\r\n  [6]: http://www.gulpjs.com.cn/\r\n  [7]: http://sass-lang.com/\r\n  [8]: http://compass-style.org\r\n  [9]: http://compass-style.org",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}